{"ast":null,"code":"'use strict';\n\nvar path = require('path');\nvar convert = require('convert-source-map');\nvar memoize = require('lodash.memoize');\nvar createGenerator = require('inline-source-map');\nvar pathIsAbsolute = require('./lib/path-is-absolute');\nvar mappingsFromMap = require('./lib/mappings-from-map');\nvar protocolRx = /^[a-z]+:\\/\\//;\n\n/**\n * Rebases a relative path in 'sourceFile' to be relative\n * to the path where 'sourceFile' is located.\n *\n * This is necessary before adding relative paths to the\n * new combined map to ensure all paths are relative to their\n * original source.\n *\n * The 'sourceRoot' from the original source map is joined\n * as well to ensure the complete path.\n *\n * Resulting paths that are absolute are passed along directly.\n *\n * @param sourceFile {String} path to the original source file that references a map\n * @param relativeRoot {String} sourceRoot in sourceFile's map to combine with relativePath\n * @param relativePath {String} source path from sourceFile's map\n */\nvar rebaseRelativePath = memoize(function (sourceFile, relativeRoot, relativePath) {\n  if (!relativePath) {\n    return relativePath;\n  }\n\n  // join relative path to root (e.g. 'src/' + 'file.js')\n  var relativeRootedPath = relativeRoot ? path.join(relativeRoot, relativePath) : relativePath;\n  relativeRootedPath = relativeRootedPath.replace(/\\\\/g, '/');\n  sourceFile = sourceFile.replace(/\\\\/g, '/');\n  if (sourceFile === relativeRootedPath ||\n  // same path,\n  pathIsAbsolute(relativeRootedPath) ||\n  // absolute path, nor\n  protocolRx.test(relativeRootedPath)) {\n    // absolute protocol need rebasing\n    return relativeRootedPath;\n  }\n\n  // make relative to source file\n  return path.join(path.dirname(sourceFile), relativeRootedPath).replace(/\\\\/g, '/');\n}, function (a, b, c) {\n  return a + '::' + b + '::' + c;\n});\nfunction resolveMap(source) {\n  var gen = convert.fromSource(source);\n  return gen ? gen.toObject() : null;\n}\nfunction hasInlinedSource(existingMap) {\n  return existingMap.sourcesContent && !!existingMap.sourcesContent[0];\n}\nfunction Combiner(file, sourceRoot) {\n  // since we include the original code in the map sourceRoot actually not needed\n  this.generator = createGenerator({\n    file: file || 'generated.js',\n    sourceRoot: sourceRoot\n  });\n}\nCombiner.prototype._addGeneratedMap = function (sourceFile, source, offset) {\n  this.generator.addGeneratedMappings(sourceFile, source, offset);\n  this.generator.addSourceContent(sourceFile, source);\n  return this;\n};\nCombiner.prototype._addExistingMap = function (sourceFile, source, existingMap, offset) {\n  var mappings = mappingsFromMap(existingMap);\n\n  // add all of the sources from the map\n  for (var i = 0, len = existingMap.sources.length; i < len; i++) {\n    if (!existingMap.sourcesContent) continue;\n    this.generator.addSourceContent(rebaseRelativePath(sourceFile, existingMap.sourceRoot, existingMap.sources[i]), existingMap.sourcesContent[i]);\n  }\n\n  // add the mappings, preserving the original mapping 'source'\n  mappings.forEach(function (mapping) {\n    // Add the mappings one at a time because 'inline-source-map' doesn't handle\n    // mapping source filenames. The mapping.source already takes sourceRoot into account\n    // per the SMConsumer.eachMapping function, so pass null for the root here.\n    this.generator.addMappings(rebaseRelativePath(sourceFile, null, mapping.source), [mapping], offset);\n  }, this);\n  return this;\n};\n\n/**\n * Adds map to underlying source map.\n * If source contains a source map comment that has the source of the original file inlined it will offset these\n * mappings and include them.\n * If no source map comment is found or it has no source inlined, mappings for the file will be generated and included\n *\n * @name addMap\n * @function\n * @param opts {Object} { sourceFile: {String}, source: {String} }\n * @param offset {Object} { line: {Number}, column: {Number} }\n */\nCombiner.prototype.addFile = function (opts, offset) {\n  offset = offset || {};\n  if (!offset.hasOwnProperty('line')) offset.line = 0;\n  if (!offset.hasOwnProperty('column')) offset.column = 0;\n  var existingMap = resolveMap(opts.source);\n  return existingMap && hasInlinedSource(existingMap) ? this._addExistingMap(opts.sourceFile, opts.source, existingMap, offset) : this._addGeneratedMap(opts.sourceFile, opts.source, offset);\n};\n\n/**\n* @name base64\n* @function\n* @return {String} base64 encoded combined source map\n*/\nCombiner.prototype.base64 = function () {\n  return this.generator.base64Encode();\n};\n\n/**\n * @name comment\n * @function\n * @return {String} base64 encoded sourceMappingUrl comment of the combined source map\n */\nCombiner.prototype.comment = function () {\n  return this.generator.inlineMappingUrl();\n};\n\n/**\n * @name create\n * @function\n * @param file {String} optional name of the generated file\n * @param sourceRoot {String} optional sourceRoot of the map to be generated\n * @return {Object} Combiner instance to which source maps can be added and later combined\n */\nexports.create = function (file, sourceRoot) {\n  return new Combiner(file, sourceRoot);\n};\n\n/**\n * @name removeComments\n * @function\n * @param src\n * @return {String} src with all sourceMappingUrl comments removed\n */\nexports.removeComments = function (src) {\n  if (!src.replace) return src;\n  return src.replace(convert.commentRegex, '').replace(convert.mapFileCommentRegex, '');\n};","map":{"version":3,"names":["path","require","convert","memoize","createGenerator","pathIsAbsolute","mappingsFromMap","protocolRx","rebaseRelativePath","sourceFile","relativeRoot","relativePath","relativeRootedPath","join","replace","test","dirname","a","b","c","resolveMap","source","gen","fromSource","toObject","hasInlinedSource","existingMap","sourcesContent","Combiner","file","sourceRoot","generator","prototype","_addGeneratedMap","offset","addGeneratedMappings","addSourceContent","_addExistingMap","mappings","i","len","sources","length","forEach","mapping","addMappings","addFile","opts","hasOwnProperty","line","column","base64","base64Encode","comment","inlineMappingUrl","exports","create","removeComments","src","commentRegex","mapFileCommentRegex"],"sources":["C:/Users/straw/Desktop/Personal CS Projects/ZTM/Web Developer Course/face-recognition/node_modules/combine-source-map/index.js"],"sourcesContent":["'use strict';\n\nvar path            =  require('path');\nvar convert         =  require('convert-source-map');\nvar memoize         =  require('lodash.memoize');\nvar createGenerator =  require('inline-source-map');\nvar pathIsAbsolute  =  require('./lib/path-is-absolute');\nvar mappingsFromMap =  require('./lib/mappings-from-map');\n\nvar protocolRx = /^[a-z]+:\\/\\//;\n\n/**\n * Rebases a relative path in 'sourceFile' to be relative\n * to the path where 'sourceFile' is located.\n *\n * This is necessary before adding relative paths to the\n * new combined map to ensure all paths are relative to their\n * original source.\n *\n * The 'sourceRoot' from the original source map is joined\n * as well to ensure the complete path.\n *\n * Resulting paths that are absolute are passed along directly.\n *\n * @param sourceFile {String} path to the original source file that references a map\n * @param relativeRoot {String} sourceRoot in sourceFile's map to combine with relativePath\n * @param relativePath {String} source path from sourceFile's map\n */\nvar rebaseRelativePath = memoize(function(sourceFile, relativeRoot, relativePath) {\n  if (!relativePath) {\n    return relativePath;\n  }\n\n  // join relative path to root (e.g. 'src/' + 'file.js')\n  var relativeRootedPath = relativeRoot ? path.join(relativeRoot, relativePath) : relativePath;\n  relativeRootedPath = relativeRootedPath.replace(/\\\\/g, '/');\n  sourceFile = sourceFile.replace(/\\\\/g, '/');\n\n  if (sourceFile === relativeRootedPath ||    // same path,\n      pathIsAbsolute(relativeRootedPath) ||   // absolute path, nor\n      protocolRx.test(relativeRootedPath)) {  // absolute protocol need rebasing\n    return relativeRootedPath;\n  }\n\n  // make relative to source file\n  return path.join(path.dirname(sourceFile), relativeRootedPath).replace(/\\\\/g, '/');\n}, function(a, b, c) {\n  return a + '::' + b + '::' + c;\n});\n\nfunction resolveMap(source) {\n  var gen = convert.fromSource(source);\n  return gen ? gen.toObject() : null;\n}\n\nfunction hasInlinedSource(existingMap) {\n  return existingMap.sourcesContent && !!existingMap.sourcesContent[0];\n}\n\nfunction Combiner(file, sourceRoot) {\n  // since we include the original code in the map sourceRoot actually not needed\n  this.generator = createGenerator({ file: file || 'generated.js', sourceRoot: sourceRoot });\n}\n\nCombiner.prototype._addGeneratedMap = function (sourceFile, source, offset) {\n  this.generator.addGeneratedMappings(sourceFile, source, offset);\n  this.generator.addSourceContent(sourceFile, source);\n  return this;\n};\n\nCombiner.prototype._addExistingMap = function (sourceFile, source, existingMap, offset) {\n  var mappings = mappingsFromMap(existingMap);\n\n  // add all of the sources from the map\n  for (var i = 0, len = existingMap.sources.length; i < len; i++) {\n    if (!existingMap.sourcesContent) continue;\n\n    this.generator.addSourceContent(\n      rebaseRelativePath(sourceFile, existingMap.sourceRoot, existingMap.sources[i]),\n      existingMap.sourcesContent[i]);\n  }\n\n  // add the mappings, preserving the original mapping 'source'\n  mappings.forEach(function(mapping) {\n    // Add the mappings one at a time because 'inline-source-map' doesn't handle\n    // mapping source filenames. The mapping.source already takes sourceRoot into account\n    // per the SMConsumer.eachMapping function, so pass null for the root here.\n    this.generator.addMappings(\n      rebaseRelativePath(sourceFile, null, mapping.source), [mapping], offset);\n  }, this);\n\n  return this;\n};\n\n/**\n * Adds map to underlying source map.\n * If source contains a source map comment that has the source of the original file inlined it will offset these\n * mappings and include them.\n * If no source map comment is found or it has no source inlined, mappings for the file will be generated and included\n *\n * @name addMap\n * @function\n * @param opts {Object} { sourceFile: {String}, source: {String} }\n * @param offset {Object} { line: {Number}, column: {Number} }\n */\nCombiner.prototype.addFile = function (opts, offset) {\n\n  offset = offset || {};\n  if (!offset.hasOwnProperty('line'))  offset.line    =  0;\n  if (!offset.hasOwnProperty('column')) offset.column =  0;\n\n  var existingMap = resolveMap(opts.source);\n\n  return existingMap && hasInlinedSource(existingMap)\n    ? this._addExistingMap(opts.sourceFile, opts.source, existingMap, offset)\n    : this._addGeneratedMap(opts.sourceFile, opts.source, offset);\n};\n\n/**\n* @name base64\n* @function\n* @return {String} base64 encoded combined source map\n*/\nCombiner.prototype.base64 = function () {\n  return this.generator.base64Encode();\n};\n\n/**\n * @name comment\n * @function\n * @return {String} base64 encoded sourceMappingUrl comment of the combined source map\n */\nCombiner.prototype.comment = function () {\n  return this.generator.inlineMappingUrl();\n};\n\n/**\n * @name create\n * @function\n * @param file {String} optional name of the generated file\n * @param sourceRoot {String} optional sourceRoot of the map to be generated\n * @return {Object} Combiner instance to which source maps can be added and later combined\n */\nexports.create = function (file, sourceRoot) { return new Combiner(file, sourceRoot); };\n\n/**\n * @name removeComments\n * @function\n * @param src\n * @return {String} src with all sourceMappingUrl comments removed\n */\nexports.removeComments = function (src) {\n  if (!src.replace) return src;\n  return src.replace(convert.commentRegex, '').replace(convert.mapFileCommentRegex, '');\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}