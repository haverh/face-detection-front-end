{"ast":null,"code":"/* Generated by `npm run build`, do not edit! */\n\n\"use strict\";\n\nvar acorn = require(\"acorn\");\nvar tt = acorn.tokTypes;\nvar isIdentifierStart = acorn.isIdentifierStart;\nmodule.exports = function (Parser) {\n  return /*@__PURE__*/function (Parser) {\n    function anonymous() {\n      Parser.apply(this, arguments);\n    }\n    if (Parser) anonymous.__proto__ = Parser;\n    anonymous.prototype = Object.create(Parser && Parser.prototype);\n    anonymous.prototype.constructor = anonymous;\n    anonymous.prototype.parseLiteral = function parseLiteral(value) {\n      var node = Parser.prototype.parseLiteral.call(this, value);\n      if (node.raw.charCodeAt(node.raw.length - 1) == 110) {\n        node.bigint = this.getNumberInput(node.start, node.end);\n      }\n      return node;\n    };\n    anonymous.prototype.readRadixNumber = function readRadixNumber(radix) {\n      var start = this.pos;\n      this.pos += 2; // 0x\n      var val = this.readInt(radix);\n      if (val === null) {\n        this.raise(this.start + 2, \"Expected number in radix \" + radix);\n      }\n      if (this.input.charCodeAt(this.pos) == 110) {\n        var str = this.getNumberInput(start, this.pos);\n        val = typeof BigInt !== \"undefined\" ? BigInt(str) : null;\n        ++this.pos;\n      } else if (isIdentifierStart(this.fullCharCodeAtPos())) {\n        this.raise(this.pos, \"Identifier directly after number\");\n      }\n      return this.finishToken(tt.num, val);\n    };\n    anonymous.prototype.readNumber = function readNumber(startsWithDot) {\n      var start = this.pos;\n\n      // Not an int\n      if (startsWithDot) {\n        return Parser.prototype.readNumber.call(this, startsWithDot);\n      }\n\n      // Legacy octal\n      if (this.input.charCodeAt(start) === 48 && this.input.charCodeAt(start + 1) !== 110) {\n        return Parser.prototype.readNumber.call(this, startsWithDot);\n      }\n      if (this.readInt(10) === null) {\n        this.raise(start, \"Invalid number\");\n      }\n\n      // Not a BigInt, reset and parse again\n      if (this.input.charCodeAt(this.pos) != 110) {\n        this.pos = start;\n        return Parser.prototype.readNumber.call(this, startsWithDot);\n      }\n      var str = this.getNumberInput(start, this.pos);\n      var val = typeof BigInt !== \"undefined\" ? BigInt(str) : null;\n      ++this.pos;\n      return this.finishToken(tt.num, val);\n    };\n\n    // This is basically a hook for acorn-numeric-separator\n    anonymous.prototype.getNumberInput = function getNumberInput(start, end) {\n      if (Parser.prototype.getNumberInput) {\n        return Parser.prototype.getNumberInput.call(this, start, end);\n      }\n      return this.input.slice(start, end);\n    };\n    return anonymous;\n  }(Parser);\n};","map":{"version":3,"names":["acorn","require","tt","tokTypes","isIdentifierStart","module","exports","Parser","anonymous","apply","arguments","__proto__","prototype","Object","create","constructor","parseLiteral","value","node","call","raw","charCodeAt","length","bigint","getNumberInput","start","end","readRadixNumber","radix","pos","val","readInt","raise","input","str","BigInt","fullCharCodeAtPos","finishToken","num","readNumber","startsWithDot","slice"],"sources":["C:/Users/straw/Desktop/Personal CS Projects/ZTM/Web Developer Course/face-recognition/node_modules/acorn-node/lib/bigint/index.js"],"sourcesContent":["/* Generated by `npm run build`, do not edit! */\n\n\"use strict\"\n\nvar acorn = require(\"acorn\")\nvar tt = acorn.tokTypes\nvar isIdentifierStart = acorn.isIdentifierStart\n\nmodule.exports = function(Parser) {\n  return /*@__PURE__*/(function (Parser) {\n    function anonymous () {\n      Parser.apply(this, arguments);\n    }\n\n    if ( Parser ) anonymous.__proto__ = Parser;\n    anonymous.prototype = Object.create( Parser && Parser.prototype );\n    anonymous.prototype.constructor = anonymous;\n\n    anonymous.prototype.parseLiteral = function parseLiteral (value) {\n      var node = Parser.prototype.parseLiteral.call(this, value)\n      if (node.raw.charCodeAt(node.raw.length - 1) == 110) { node.bigint = this.getNumberInput(node.start, node.end) }\n      return node\n    };\n\n    anonymous.prototype.readRadixNumber = function readRadixNumber (radix) {\n      var start = this.pos\n      this.pos += 2 // 0x\n      var val = this.readInt(radix)\n      if (val === null) { this.raise(this.start + 2, (\"Expected number in radix \" + radix)) }\n      if (this.input.charCodeAt(this.pos) == 110) {\n        var str = this.getNumberInput(start, this.pos)\n        val = typeof BigInt !== \"undefined\" ? BigInt(str) : null\n        ++this.pos\n      } else if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\") }\n      return this.finishToken(tt.num, val)\n    };\n\n    anonymous.prototype.readNumber = function readNumber (startsWithDot) {\n      var start = this.pos\n\n      // Not an int\n      if (startsWithDot) { return Parser.prototype.readNumber.call(this, startsWithDot) }\n\n      // Legacy octal\n      if (this.input.charCodeAt(start) === 48 && this.input.charCodeAt(start + 1) !== 110) {\n        return Parser.prototype.readNumber.call(this, startsWithDot)\n      }\n\n      if (this.readInt(10) === null) { this.raise(start, \"Invalid number\") }\n\n      // Not a BigInt, reset and parse again\n      if (this.input.charCodeAt(this.pos) != 110) {\n        this.pos = start\n        return Parser.prototype.readNumber.call(this, startsWithDot)\n      }\n\n      var str = this.getNumberInput(start, this.pos)\n      var val = typeof BigInt !== \"undefined\" ? BigInt(str) : null\n      ++this.pos\n      return this.finishToken(tt.num, val)\n    };\n\n    // This is basically a hook for acorn-numeric-separator\n    anonymous.prototype.getNumberInput = function getNumberInput (start, end) {\n      if (Parser.prototype.getNumberInput) { return Parser.prototype.getNumberInput.call(this, start, end) }\n      return this.input.slice(start, end)\n    };\n\n    return anonymous;\n  }(Parser))\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}