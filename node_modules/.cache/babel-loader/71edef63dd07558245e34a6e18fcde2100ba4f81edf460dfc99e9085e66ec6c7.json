{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\straw\\\\Desktop\\\\Personal CS Projects\\\\ZTM\\\\Web Developer Course\\\\face-recognition\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\n// import type { Container, Engine } from \"tsparticles-engine\";\nimport Particles from 'react-tsparticles';\nimport { loadFull } from 'tsparticles';\nimport { ClarifaiStub, grpc } from 'clarifai-nodejs-grpc';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst USER_ID = 'haverh';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = 'ba1cf962af4741d28934e6bcc44f2325';\nconst APP_ID = 'face-recognition';\n// Change these to whatever model and image URL you want to use\nconst MODEL_ID = 'face-detection';\nconst IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n// This is optional.You can specify a model version or the empty string for the default\nconst MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\nconst particlesInit = async main => {\n  console.log(main);\n\n  // you can initialize the tsParticles instance (main) here, adding custom shapes or presets\n  // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n  // starting from v2 you can add only the features you need reducing the bundle size\n  await loadFull(main);\n};\nconst particlesLoaded = container => {\n  console.log(container);\n};\nconst particlesOptions = {\n  fpsLimit: 120,\n  interactivity: {\n    events: {\n      onClick: {\n        enable: true,\n        mode: \"push\"\n      },\n      onHover: {\n        enable: true,\n        mode: \"repulse\"\n      },\n      resize: true\n    },\n    modes: {\n      push: {\n        quantity: 2\n      },\n      repulse: {\n        distance: 100,\n        duration: 0.2\n      }\n    }\n  },\n  particles: {\n    color: {\n      value: \"#ffffff\"\n    },\n    links: {\n      color: \"#ffffff\",\n      distance: 150,\n      enable: true,\n      opacity: 0.5,\n      width: 1\n    },\n    collisions: {\n      enable: true\n    },\n    move: {\n      direction: \"none\",\n      enable: true,\n      outModes: {\n        default: \"bounce\"\n      },\n      random: false,\n      speed: 2,\n      straight: false\n    },\n    number: {\n      density: {\n        enable: true,\n        area: 800\n      },\n      value: 80\n    },\n    opacity: {\n      value: 0.5\n    },\n    shape: {\n      type: [\"polygon\", \"triangle\"]\n    },\n    size: {\n      value: {\n        min: 1,\n        max: 5\n      }\n    }\n  },\n  detectRetina: true\n};\nstub.PostModelOutputs({\n  user_app_id: {\n    \"user_id\": USER_ID,\n    \"app_id\": APP_ID\n  },\n  model_id: MODEL_ID,\n  version_id: MODEL_VERSION_ID,\n  // This is optional. Defaults to the latest model version.\n  inputs: [{\n    data: {\n      image: {\n        url: IMAGE_URL,\n        allow_duplicate_url: true\n      }\n    }\n  }]\n}, metadata, (err, response) => {\n  if (err) {\n    throw new Error(err);\n  }\n  if (response.status.code !== 10000) {\n    throw new Error(\"Post model outputs failed, status: \" + response.status.description);\n  }\n\n  // Since we have one input, one output will exist here.\n  const output = response.outputs[0];\n  console.log(\"Predicted concepts:\");\n  for (const concept of output.data.concepts) {\n    console.log(concept.name + \" \" + concept.value);\n  }\n});\nclass App extends Component {\n  constructor() {\n    super();\n    this.onInputChange = event => {\n      console.log(event.target.value);\n    };\n    this.state = {\n      input: ''\n    };\n  }\n  // onButtonSubmit = () => {\n  //    console.log('click');\n  //    app.models.predict(\"868646ee5c464d6aaf1d6753cbfd7a3e\", \"https://samples.clarifai.com/face-det.jpg\").then(\n  //       function(response) {\n  //          // do something with response\n  //          console.log(response);\n  //       },\n  //       function(err) {\n  //          // there was an error\n  //       }\n  //    );\n  // }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Particles, {\n        className: \"particles\",\n        init: particlesInit,\n        loaded: particlesLoaded,\n        options: particlesOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange\n        // onButtonSubmit={this.onButtonSubmit}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Particles","loadFull","ClarifaiStub","grpc","Navigation","Logo","ImageLinkForm","Rank","USER_ID","PAT","APP_ID","MODEL_ID","IMAGE_URL","MODEL_VERSION_ID","stub","metadata","Metadata","set","particlesInit","main","console","log","particlesLoaded","container","particlesOptions","fpsLimit","interactivity","events","onClick","enable","mode","onHover","resize","modes","push","quantity","repulse","distance","duration","particles","color","value","links","opacity","width","collisions","move","direction","outModes","default","random","speed","straight","number","density","area","shape","type","size","min","max","detectRetina","PostModelOutputs","user_app_id","model_id","version_id","inputs","data","image","url","allow_duplicate_url","err","response","Error","status","code","description","output","outputs","concept","concepts","name","App","constructor","onInputChange","event","target","state","input","render"],"sources":["C:/Users/straw/Desktop/Personal CS Projects/ZTM/Web Developer Course/face-recognition/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\n// import type { Container, Engine } from \"tsparticles-engine\";\nimport Particles from 'react-tsparticles';\nimport { loadFull } from 'tsparticles';\nimport {ClarifaiStub, grpc} from 'clarifai-nodejs-grpc';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport './App.css';\n\nconst USER_ID = 'haverh';\n// Your PAT (Personal Access Token) can be found in the portal under Authentification\nconst PAT = 'ba1cf962af4741d28934e6bcc44f2325';\nconst APP_ID = 'face-recognition';\n// Change these to whatever model and image URL you want to use\nconst MODEL_ID = 'face-detection';\nconst IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n// This is optional.You can specify a model version or the empty string for the default\nconst MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';\n\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key \" + PAT);\n\nconst particlesInit = async (main) => {\n       console.log(main);\n\n       // you can initialize the tsParticles instance (main) here, adding custom shapes or presets\n       // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n       // starting from v2 you can add only the features you need reducing the bundle size\n       await loadFull(main);\n     };\n\nconst particlesLoaded = (container) => {\n console.log(container);\n};\nconst particlesOptions = {\n     fpsLimit: 120,\n     interactivity: {\n       events: {\n         onClick: {\n           enable: true,\n           mode: \"push\",\n         },\n         onHover: {\n           enable: true,\n           mode: \"repulse\",\n         },\n         resize: true,\n       },\n       modes: {\n         push: {\n           quantity: 2,\n         },\n         repulse: {\n           distance: 100,\n           duration: 0.2,\n         },\n       },\n     },\n     particles: {\n       color: {\n         value: \"#ffffff\",\n       },\n       links: {\n         color: \"#ffffff\",\n         distance: 150,\n         enable: true,\n         opacity: 0.5,\n         width: 1,\n       },\n       collisions: {\n         enable: true,\n       },\n       move: {\n         direction: \"none\",\n         enable: true,\n         outModes: {\n           default: \"bounce\",\n         },\n         random: false,\n         speed: 2,\n         straight: false,\n       },\n       number: {\n         density: {\n           enable: true,\n           area: 800,\n         },\n         value: 80,\n       },\n       opacity: {\n         value: 0.5,\n       },\n       shape: {\n         type: [\"polygon\", \"triangle\"],\n       },\n       size: {\n         value: { min: 1, max: 5 },\n       },\n     },\n     detectRetina: true,\n};\n\nstub.PostModelOutputs(\n    {\n        user_app_id: {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        model_id: MODEL_ID,\n        version_id: MODEL_VERSION_ID, // This is optional. Defaults to the latest model version.\n        inputs: [\n            { data: { image: { url: IMAGE_URL, allow_duplicate_url: true } } }\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Post model outputs failed, status: \" + response.status.description);\n        }\n\n        // Since we have one input, one output will exist here.\n        const output = response.outputs[0];\n\n        console.log(\"Predicted concepts:\");\n        for (const concept of output.data.concepts) {\n            console.log(concept.name + \" \" + concept.value);\n        }\n    }\n\n);\n\nclass App extends Component {\n   constructor() {\n      super();\n      this.state = {\n         input: '',\n      }\n   }\n\n   onInputChange = (event) => {\n      console.log(event.target.value);\n   }\n\n   // onButtonSubmit = () => {\n   //    console.log('click');\n   //    app.models.predict(\"868646ee5c464d6aaf1d6753cbfd7a3e\", \"https://samples.clarifai.com/face-det.jpg\").then(\n   //       function(response) {\n   //          // do something with response\n   //          console.log(response);\n   //       },\n   //       function(err) {\n   //          // there was an error\n   //       }\n   //    );\n   // }\n\n   render() {\n      return (\n      <div className=\"App\">\n         <Particles className='particles'\n            init={particlesInit}\n            loaded={particlesLoaded}\n            options = {particlesOptions}\n         />\n         <Navigation />\n         <Logo />\n         <Rank />\n         <ImageLinkForm\n            onInputChange={this.onInputChange}\n            // onButtonSubmit={this.onButtonSubmit}\n            />\n         {/*   <FaceRecognition />*/}\n      </div>\n   );\n   }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}