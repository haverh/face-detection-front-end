{"ast":null,"code":"/* Generated by `npm run build`, do not edit! */\n\n\"use strict\";\n\nmodule.exports = function (Parser) {\n  return /*@__PURE__*/function (Parser) {\n    function anonymous() {\n      Parser.apply(this, arguments);\n    }\n    if (Parser) anonymous.__proto__ = Parser;\n    anonymous.prototype = Object.create(Parser && Parser.prototype);\n    anonymous.prototype.constructor = anonymous;\n    anonymous.prototype.readInt = function readInt(radix, len) {\n      // Hack: len is only != null for unicode escape sequences,\n      // where numeric separators are not allowed\n      if (len != null) {\n        return Parser.prototype.readInt.call(this, radix, len);\n      }\n      var start = this.pos,\n        total = 0,\n        acceptUnderscore = false;\n      for (;;) {\n        var code = this.input.charCodeAt(this.pos),\n          val = void 0;\n        if (code >= 97) {\n          val = code - 97 + 10;\n        } // a\n        else if (code == 95) {\n          if (!acceptUnderscore) {\n            this.raise(this.pos, \"Invalid numeric separator\");\n          }\n          ++this.pos;\n          acceptUnderscore = false;\n          continue;\n        } else if (code >= 65) {\n          val = code - 65 + 10;\n        } // A\n        else if (code >= 48 && code <= 57) {\n          val = code - 48;\n        } // 0-9\n        else {\n          val = Infinity;\n        }\n        if (val >= radix) {\n          break;\n        }\n        ++this.pos;\n        total = total * radix + val;\n        acceptUnderscore = true;\n      }\n      if (this.pos === start) {\n        return null;\n      }\n      if (!acceptUnderscore) {\n        this.raise(this.pos - 1, \"Invalid numeric separator\");\n      }\n      return total;\n    };\n    anonymous.prototype.readNumber = function readNumber(startsWithDot) {\n      var token = Parser.prototype.readNumber.call(this, startsWithDot);\n      var octal = this.end - this.start >= 2 && this.input.charCodeAt(this.start) === 48;\n      var stripped = this.getNumberInput(this.start, this.end);\n      if (stripped.length < this.end - this.start) {\n        if (octal) {\n          this.raise(this.start, \"Invalid number\");\n        }\n        this.value = parseFloat(stripped);\n      }\n      return token;\n    };\n\n    // This is used by acorn-bigint\n    anonymous.prototype.getNumberInput = function getNumberInput(start, end) {\n      return this.input.slice(start, end).replace(/_/g, \"\");\n    };\n    return anonymous;\n  }(Parser);\n};","map":{"version":3,"names":["module","exports","Parser","anonymous","apply","arguments","__proto__","prototype","Object","create","constructor","readInt","radix","len","call","start","pos","total","acceptUnderscore","code","input","charCodeAt","val","raise","Infinity","readNumber","startsWithDot","token","octal","end","stripped","getNumberInput","length","value","parseFloat","slice","replace"],"sources":["C:/Users/straw/Desktop/Personal CS Projects/ZTM/Web Developer Course/face-recognition/node_modules/acorn-node/lib/numeric-separator/index.js"],"sourcesContent":["/* Generated by `npm run build`, do not edit! */\n\n\"use strict\"\n\nmodule.exports = function(Parser) {\n  return /*@__PURE__*/(function (Parser) {\n    function anonymous () {\n      Parser.apply(this, arguments);\n    }\n\n    if ( Parser ) anonymous.__proto__ = Parser;\n    anonymous.prototype = Object.create( Parser && Parser.prototype );\n    anonymous.prototype.constructor = anonymous;\n\n    anonymous.prototype.readInt = function readInt (radix, len) {\n      // Hack: len is only != null for unicode escape sequences,\n      // where numeric separators are not allowed\n      if (len != null) { return Parser.prototype.readInt.call(this, radix, len) }\n\n      var start = this.pos, total = 0, acceptUnderscore = false\n      for (;;) {\n        var code = this.input.charCodeAt(this.pos), val = (void 0)\n        if (code >= 97) { val = code - 97 + 10 } // a\n        else if (code == 95) {\n          if (!acceptUnderscore) { this.raise(this.pos, \"Invalid numeric separator\") }\n          ++this.pos\n          acceptUnderscore = false\n          continue\n        } else if (code >= 65) { val = code - 65 + 10 } // A\n        else if (code >= 48 && code <= 57) { val = code - 48 } // 0-9\n        else { val = Infinity }\n        if (val >= radix) { break }\n        ++this.pos\n        total = total * radix + val\n        acceptUnderscore = true\n      }\n      if (this.pos === start) { return null }\n      if (!acceptUnderscore) { this.raise(this.pos - 1, \"Invalid numeric separator\") }\n\n      return total\n    };\n\n    anonymous.prototype.readNumber = function readNumber (startsWithDot) {\n      var token = Parser.prototype.readNumber.call(this, startsWithDot)\n      var octal = this.end - this.start >= 2 && this.input.charCodeAt(this.start) === 48\n      var stripped = this.getNumberInput(this.start, this.end)\n      if (stripped.length < this.end - this.start) {\n        if (octal) { this.raise(this.start, \"Invalid number\") }\n        this.value = parseFloat(stripped)\n      }\n      return token\n    };\n\n    // This is used by acorn-bigint\n    anonymous.prototype.getNumberInput = function getNumberInput (start, end) {\n      return this.input.slice(start, end).replace(/_/g, \"\")\n    };\n\n    return anonymous;\n  }(Parser))\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}